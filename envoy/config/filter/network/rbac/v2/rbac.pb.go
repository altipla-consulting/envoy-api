// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/network/rbac/v2/rbac.proto

package v2

import (
	fmt "fmt"
	v2 "github.com/altipla-consulting/envoy-api/envoy/config/rbac/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RBAC_EnforcementType int32

const (
	// Apply RBAC policies when the first byte of data arrives on the connection.
	RBAC_ONE_TIME_ON_FIRST_BYTE RBAC_EnforcementType = 0
	// Continuously apply RBAC policies as data arrives. Use this mode when
	// using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
	// etc. when the protocol decoders emit dynamic metadata such as the
	// resources being accessed and the operations on the resources.
	RBAC_CONTINUOUS RBAC_EnforcementType = 1
)

var RBAC_EnforcementType_name = map[int32]string{
	0: "ONE_TIME_ON_FIRST_BYTE",
	1: "CONTINUOUS",
}

var RBAC_EnforcementType_value = map[string]int32{
	"ONE_TIME_ON_FIRST_BYTE": 0,
	"CONTINUOUS":             1,
}

func (x RBAC_EnforcementType) String() string {
	return proto.EnumName(RBAC_EnforcementType_name, int32(x))
}

func (RBAC_EnforcementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8ec60cc393c44598, []int{0, 0}
}

// RBAC network filter config.
//
// Header should not be used in rules/shadow_rules in RBAC network filter as
// this information is only available in :ref:`RBAC http filter <config_http_filters_rbac>`.
type RBAC struct {
	// Specify the RBAC rules to be applied globally.
	// If absent, no enforcing RBAC policy will be applied.
	Rules *v2.RBAC `protobuf:"bytes,1,opt,name=rules,proto3" json:"rules,omitempty"`
	// Shadow rules are not enforced by the filter but will emit stats and logs
	// and can be used for rule testing.
	// If absent, no shadow RBAC policy will be applied.
	ShadowRules *v2.RBAC `protobuf:"bytes,2,opt,name=shadow_rules,json=shadowRules,proto3" json:"shadow_rules,omitempty"`
	// The prefix to use when emitting statistics.
	StatPrefix string `protobuf:"bytes,3,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// RBAC enforcement strategy. By default RBAC will be enforced only once
	// when the first byte of data arrives from the downstream. When used in
	// conjunction with filters that emit dynamic metadata after decoding
	// every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
	// CONTINUOUS to enforce RBAC policies on every message boundary.
	EnforcementType      RBAC_EnforcementType `protobuf:"varint,4,opt,name=enforcement_type,json=enforcementType,proto3,enum=envoy.config.filter.network.rbac.v2.RBAC_EnforcementType" json:"enforcement_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RBAC) Reset()         { *m = RBAC{} }
func (m *RBAC) String() string { return proto.CompactTextString(m) }
func (*RBAC) ProtoMessage()    {}
func (*RBAC) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec60cc393c44598, []int{0}
}

func (m *RBAC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RBAC.Unmarshal(m, b)
}
func (m *RBAC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RBAC.Marshal(b, m, deterministic)
}
func (m *RBAC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBAC.Merge(m, src)
}
func (m *RBAC) XXX_Size() int {
	return xxx_messageInfo_RBAC.Size(m)
}
func (m *RBAC) XXX_DiscardUnknown() {
	xxx_messageInfo_RBAC.DiscardUnknown(m)
}

var xxx_messageInfo_RBAC proto.InternalMessageInfo

func (m *RBAC) GetRules() *v2.RBAC {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *RBAC) GetShadowRules() *v2.RBAC {
	if m != nil {
		return m.ShadowRules
	}
	return nil
}

func (m *RBAC) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *RBAC) GetEnforcementType() RBAC_EnforcementType {
	if m != nil {
		return m.EnforcementType
	}
	return RBAC_ONE_TIME_ON_FIRST_BYTE
}

func init() {
	proto.RegisterEnum("envoy.config.filter.network.rbac.v2.RBAC_EnforcementType", RBAC_EnforcementType_name, RBAC_EnforcementType_value)
	proto.RegisterType((*RBAC)(nil), "envoy.config.filter.network.rbac.v2.RBAC")
}

func init() {
	proto.RegisterFile("envoy/config/filter/network/rbac/v2/rbac.proto", fileDescriptor_8ec60cc393c44598)
}

var fileDescriptor_8ec60cc393c44598 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4f, 0xfb, 0x30,
	0x10, 0xc5, 0xff, 0xce, 0xbf, 0x80, 0xea, 0xa2, 0xb6, 0x8a, 0x10, 0x54, 0x59, 0x88, 0xca, 0x92,
	0xc9, 0x86, 0x30, 0x31, 0x74, 0x20, 0x25, 0x48, 0x1d, 0x48, 0x2a, 0x37, 0x1d, 0x60, 0xb1, 0xd2,
	0xd4, 0x29, 0x11, 0x25, 0x8e, 0x5c, 0x93, 0x36, 0x5f, 0x90, 0x0f, 0xc5, 0x84, 0x62, 0x17, 0xa1,
	0xc2, 0x40, 0x27, 0x9f, 0xee, 0x7e, 0xef, 0xdd, 0x93, 0x0f, 0x22, 0x96, 0x97, 0xbc, 0xc2, 0x09,
	0xcf, 0xd3, 0x6c, 0x81, 0xd3, 0x6c, 0x29, 0x99, 0xc0, 0x39, 0x93, 0x6b, 0x2e, 0x5e, 0xb0, 0x98,
	0xc5, 0x09, 0x2e, 0x5d, 0xf5, 0xa2, 0x42, 0x70, 0xc9, 0xcd, 0x0b, 0xc5, 0x23, 0xcd, 0x23, 0xcd,
	0xa3, 0x2d, 0x8f, 0x14, 0x57, 0xba, 0xd6, 0xf9, 0x8e, 0xe9, 0x6f, 0x17, 0xeb, 0xac, 0x8c, 0x97,
	0xd9, 0x3c, 0x96, 0x0c, 0x7f, 0x15, 0xdb, 0xc1, 0xc9, 0x82, 0x2f, 0xb8, 0x2a, 0x71, 0x5d, 0xe9,
	0x6e, 0xff, 0xdd, 0x80, 0x0d, 0xe2, 0xdd, 0x0e, 0xcd, 0x4b, 0x78, 0x20, 0xde, 0x96, 0x6c, 0xd5,
	0x03, 0x36, 0x70, 0x5a, 0xae, 0x85, 0x76, 0xd2, 0x6c, 0xd7, 0xa3, 0x1a, 0x25, 0x1a, 0x34, 0x07,
	0xf0, 0x78, 0xf5, 0x1c, 0xcf, 0xf9, 0x9a, 0x6a, 0xa1, 0xf1, 0xa7, 0xb0, 0xa5, 0x79, 0xa2, 0xe4,
	0x0e, 0x6c, 0xad, 0x64, 0x2c, 0x69, 0x21, 0x58, 0x9a, 0x6d, 0x7a, 0xff, 0x6d, 0xe0, 0x34, 0xbd,
	0xa3, 0x0f, 0xaf, 0x21, 0x0c, 0x1b, 0x10, 0x58, 0xcf, 0xc6, 0x6a, 0x64, 0xce, 0x61, 0x97, 0xe5,
	0x29, 0x17, 0x09, 0x7b, 0x65, 0xb9, 0xa4, 0xb2, 0x2a, 0x58, 0xaf, 0x61, 0x03, 0xa7, 0xed, 0xde,
	0xa0, 0x3d, 0xfe, 0x4c, 0xed, 0x46, 0xfe, 0xb7, 0x43, 0x54, 0x15, 0x8c, 0x74, 0xd8, 0x6e, 0xa3,
	0x3f, 0x80, 0x9d, 0x1f, 0x8c, 0x69, 0xc1, 0xd3, 0x30, 0xf0, 0x69, 0x34, 0x7a, 0xf0, 0x69, 0x18,
	0xd0, 0xfb, 0x11, 0x99, 0x44, 0xd4, 0x7b, 0x8c, 0xfc, 0xee, 0x3f, 0xb3, 0x0d, 0xe1, 0x30, 0x0c,
	0xa2, 0x51, 0x30, 0x0d, 0xa7, 0x93, 0x2e, 0xf0, 0xee, 0xe0, 0x55, 0xc6, 0x75, 0x9c, 0x42, 0xf0,
	0x4d, 0xb5, 0x4f, 0x32, 0xaf, 0x49, 0x66, 0x71, 0x32, 0xae, 0x0f, 0x31, 0x06, 0x4f, 0x46, 0xe9,
	0xce, 0x0e, 0xd5, 0x55, 0xae, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x9d, 0x28, 0xf8, 0x3c,
	0x02, 0x00, 0x00,
}
