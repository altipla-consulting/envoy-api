// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/header_to_metadata/v2/header_to_metadata.proto

package v2

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Config_ValueType int32

const (
	Config_STRING Config_ValueType = 0
	Config_NUMBER Config_ValueType = 1
)

var Config_ValueType_name = map[int32]string{
	0: "STRING",
	1: "NUMBER",
}

var Config_ValueType_value = map[string]int32{
	"STRING": 0,
	"NUMBER": 1,
}

func (x Config_ValueType) String() string {
	return proto.EnumName(Config_ValueType_name, int32(x))
}

func (Config_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5891b90c2f7c1ebe, []int{0, 0}
}

type Config struct {
	// The list of rules to apply to requests.
	RequestRules []*Config_Rule `protobuf:"bytes,1,rep,name=request_rules,json=requestRules,proto3" json:"request_rules,omitempty"`
	// The list of rules to apply to responses.
	ResponseRules        []*Config_Rule `protobuf:"bytes,2,rep,name=response_rules,json=responseRules,proto3" json:"response_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_5891b90c2f7c1ebe, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetRequestRules() []*Config_Rule {
	if m != nil {
		return m.RequestRules
	}
	return nil
}

func (m *Config) GetResponseRules() []*Config_Rule {
	if m != nil {
		return m.ResponseRules
	}
	return nil
}

type Config_KeyValuePair struct {
	// The namespace — if this is empty, the filter's namespace will be used.
	MetadataNamespace string `protobuf:"bytes,1,opt,name=metadata_namespace,json=metadataNamespace,proto3" json:"metadata_namespace,omitempty"`
	// The key to use within the namespace.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The value to pair with the given key.
	//
	// When used for a `on_header_present` case, if value is non-empty it'll be used
	// instead of the header value. If both are empty, no metadata is added.
	//
	// When used for a `on_header_missing` case, a non-empty value must be provided
	// otherwise no metadata is added.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The value's type — defaults to string.
	Type                 Config_ValueType `protobuf:"varint,4,opt,name=type,proto3,enum=envoy.config.filter.http.header_to_metadata.v2.Config_ValueType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Config_KeyValuePair) Reset()         { *m = Config_KeyValuePair{} }
func (m *Config_KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*Config_KeyValuePair) ProtoMessage()    {}
func (*Config_KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_5891b90c2f7c1ebe, []int{0, 0}
}

func (m *Config_KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config_KeyValuePair.Unmarshal(m, b)
}
func (m *Config_KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *Config_KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config_KeyValuePair.Merge(m, src)
}
func (m *Config_KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_Config_KeyValuePair.Size(m)
}
func (m *Config_KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_Config_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_Config_KeyValuePair proto.InternalMessageInfo

func (m *Config_KeyValuePair) GetMetadataNamespace() string {
	if m != nil {
		return m.MetadataNamespace
	}
	return ""
}

func (m *Config_KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Config_KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Config_KeyValuePair) GetType() Config_ValueType {
	if m != nil {
		return m.Type
	}
	return Config_STRING
}

// A Rule defines what metadata to apply when a header is present or missing.
type Config_Rule struct {
	// The header that triggers this rule — required.
	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// If the header is present, apply this metadata KeyValuePair.
	//
	// If the value in the KeyValuePair is non-empty, it'll be used instead
	// of the header value.
	OnHeaderPresent *Config_KeyValuePair `protobuf:"bytes,2,opt,name=on_header_present,json=onHeaderPresent,proto3" json:"on_header_present,omitempty"`
	// If the header is not present, apply this metadata KeyValuePair.
	//
	// The value in the KeyValuePair must be set, since it'll be used in lieu
	// of the missing header value.
	OnHeaderMissing *Config_KeyValuePair `protobuf:"bytes,3,opt,name=on_header_missing,json=onHeaderMissing,proto3" json:"on_header_missing,omitempty"`
	// Whether or not to remove the header after a rule is applied.
	//
	// This prevents headers from leaking.
	Remove               bool     `protobuf:"varint,4,opt,name=remove,proto3" json:"remove,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config_Rule) Reset()         { *m = Config_Rule{} }
func (m *Config_Rule) String() string { return proto.CompactTextString(m) }
func (*Config_Rule) ProtoMessage()    {}
func (*Config_Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_5891b90c2f7c1ebe, []int{0, 1}
}

func (m *Config_Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config_Rule.Unmarshal(m, b)
}
func (m *Config_Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config_Rule.Marshal(b, m, deterministic)
}
func (m *Config_Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config_Rule.Merge(m, src)
}
func (m *Config_Rule) XXX_Size() int {
	return xxx_messageInfo_Config_Rule.Size(m)
}
func (m *Config_Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Config_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Config_Rule proto.InternalMessageInfo

func (m *Config_Rule) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *Config_Rule) GetOnHeaderPresent() *Config_KeyValuePair {
	if m != nil {
		return m.OnHeaderPresent
	}
	return nil
}

func (m *Config_Rule) GetOnHeaderMissing() *Config_KeyValuePair {
	if m != nil {
		return m.OnHeaderMissing
	}
	return nil
}

func (m *Config_Rule) GetRemove() bool {
	if m != nil {
		return m.Remove
	}
	return false
}

func init() {
	proto.RegisterEnum("envoy.config.filter.http.header_to_metadata.v2.Config_ValueType", Config_ValueType_name, Config_ValueType_value)
	proto.RegisterType((*Config)(nil), "envoy.config.filter.http.header_to_metadata.v2.Config")
	proto.RegisterType((*Config_KeyValuePair)(nil), "envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair")
	proto.RegisterType((*Config_Rule)(nil), "envoy.config.filter.http.header_to_metadata.v2.Config.Rule")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/header_to_metadata/v2/header_to_metadata.proto", fileDescriptor_5891b90c2f7c1ebe)
}

var fileDescriptor_5891b90c2f7c1ebe = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0x49, 0x66, 0x1a, 0xe8, 0xe9, 0x85, 0xd6, 0xe2, 0x12, 0x66, 0xc3, 0xa8, 0x6c, 0x66,
	0x83, 0x23, 0x85, 0x25, 0x2c, 0x50, 0x2a, 0x54, 0x10, 0x9a, 0xd1, 0xc8, 0x0c, 0x2c, 0x60, 0x11,
	0xdc, 0xce, 0x69, 0x1b, 0x91, 0xb1, 0x8d, 0xed, 0x89, 0xc8, 0xe3, 0xf0, 0x2e, 0x3c, 0x07, 0x0f,
	0xc2, 0x0a, 0xd9, 0x4e, 0xb8, 0x48, 0xdd, 0x74, 0x60, 0xe7, 0x73, 0x8e, 0xcf, 0xf7, 0xff, 0xfe,
	0x25, 0xc3, 0x09, 0x8a, 0x46, 0xb6, 0xd9, 0x99, 0x14, 0xe7, 0xd5, 0x45, 0x76, 0x5e, 0xd5, 0x16,
	0x75, 0x76, 0x69, 0xad, 0xca, 0x2e, 0x91, 0x2f, 0x51, 0x97, 0x56, 0x96, 0x2b, 0xb4, 0x7c, 0xc9,
	0x2d, 0xcf, 0x9a, 0xfc, 0x8a, 0x2e, 0x55, 0x5a, 0x5a, 0x49, 0xa8, 0x07, 0xd1, 0x00, 0xa2, 0x01,
	0x44, 0x1d, 0x88, 0x5e, 0xb1, 0xd2, 0xe4, 0xa3, 0xfb, 0x0d, 0xaf, 0xab, 0x25, 0xb7, 0x98, 0xf5,
	0x87, 0x00, 0x3a, 0xfa, 0xbe, 0x05, 0xc9, 0xb1, 0xa7, 0x90, 0x8f, 0xb0, 0xa7, 0xf1, 0xf3, 0x1a,
	0x8d, 0x2d, 0xf5, 0xba, 0x46, 0x93, 0x46, 0xe3, 0xc1, 0x64, 0x27, 0x7f, 0x7a, 0x4d, 0x2d, 0x1a,
	0x70, 0x94, 0xad, 0x6b, 0x64, 0xbb, 0x1d, 0xd1, 0x15, 0x86, 0x9c, 0xc2, 0xbe, 0x46, 0xa3, 0xa4,
	0x30, 0xd8, 0x49, 0xc4, 0xff, 0x2e, 0xb1, 0xd7, 0x23, 0xbd, 0xc6, 0xe8, 0x5b, 0x04, 0xbb, 0xaf,
	0xb1, 0x7d, 0xc7, 0xeb, 0x35, 0xce, 0x79, 0xa5, 0xc9, 0x63, 0x20, 0xfd, 0x6a, 0x29, 0xf8, 0x0a,
	0x8d, 0xe2, 0x67, 0x98, 0x46, 0xe3, 0x68, 0xb2, 0xcd, 0x0e, 0xfb, 0xc9, 0xac, 0x1f, 0x90, 0x07,
	0x30, 0xf8, 0x84, 0x6d, 0x1a, 0xbb, 0x79, 0x71, 0xf3, 0x47, 0x31, 0xd4, 0xf1, 0x38, 0x62, 0xae,
	0x47, 0xee, 0xc0, 0x56, 0xe3, 0xb0, 0xe9, 0xc0, 0x2f, 0x87, 0x82, 0x2c, 0x60, 0x68, 0x5b, 0x85,
	0xe9, 0x70, 0x1c, 0x4d, 0xf6, 0xf3, 0xe7, 0x1b, 0x3e, 0xc5, 0xfb, 0x5d, 0xb4, 0x0a, 0x99, 0xa7,
	0x8d, 0xbe, 0xc6, 0x30, 0x74, 0x0f, 0x22, 0x0f, 0x21, 0x09, 0x8b, 0xc1, 0xf2, 0x6f, 0x4b, 0x5d,
	0x9b, 0x48, 0x38, 0x94, 0xa2, 0xec, 0xe0, 0x4a, 0xa3, 0x41, 0x61, 0xbd, 0xfd, 0x9d, 0xfc, 0x78,
	0x43, 0x33, 0x7f, 0xe6, 0xc7, 0x6e, 0x4b, 0xf1, 0xd2, 0x5f, 0x9e, 0x07, 0xf6, 0xdf, 0x82, 0xab,
	0xca, 0x98, 0x4a, 0x5c, 0xf8, 0x48, 0xfe, 0xb7, 0xe0, 0x34, 0xb0, 0xc9, 0x3d, 0x48, 0x34, 0xae,
	0x64, 0x13, 0x32, 0xbe, 0xc5, 0xba, 0xea, 0xe8, 0x11, 0x6c, 0xff, 0x8a, 0x8d, 0x00, 0x24, 0x6f,
	0x16, 0xec, 0xd5, 0xec, 0xe4, 0xe0, 0x86, 0x3b, 0xcf, 0xde, 0x4e, 0x8b, 0x17, 0xec, 0x20, 0x2a,
	0x3e, 0xc0, 0xb3, 0x4a, 0x06, 0x5b, 0x4a, 0xcb, 0x2f, 0xed, 0x35, 0x1d, 0x16, 0x77, 0x83, 0x97,
	0x85, 0x9c, 0x76, 0xcd, 0xb9, 0xfb, 0x37, 0xf3, 0xe8, 0x7d, 0xdc, 0xe4, 0xa7, 0x89, 0xff, 0x44,
	0x4f, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x93, 0xc7, 0x61, 0x20, 0xd8, 0x03, 0x00, 0x00,
}
