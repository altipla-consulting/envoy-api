// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/fault/v2/fault.proto

package v2

import (
	fmt "fmt"
	route "github.com/altipla-consulting/envoy-api/envoy/api/v2/route"
	v2 "github.com/altipla-consulting/envoy-api/envoy/config/filter/fault/v2"
	_type "github.com/altipla-consulting/envoy-api/envoy/type"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FaultAbort struct {
	// Types that are valid to be assigned to ErrorType:
	//	*FaultAbort_HttpStatus
	ErrorType isFaultAbort_ErrorType `protobuf_oneof:"error_type"`
	// The percentage of requests/operations/connections that will be aborted with the error code
	// provided.
	Percentage           *_type.FractionalPercent `protobuf:"bytes,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FaultAbort) Reset()         { *m = FaultAbort{} }
func (m *FaultAbort) String() string { return proto.CompactTextString(m) }
func (*FaultAbort) ProtoMessage()    {}
func (*FaultAbort) Descriptor() ([]byte, []int) {
	return fileDescriptor_26070db6b6576d5c, []int{0}
}

func (m *FaultAbort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultAbort.Unmarshal(m, b)
}
func (m *FaultAbort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultAbort.Marshal(b, m, deterministic)
}
func (m *FaultAbort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultAbort.Merge(m, src)
}
func (m *FaultAbort) XXX_Size() int {
	return xxx_messageInfo_FaultAbort.Size(m)
}
func (m *FaultAbort) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultAbort.DiscardUnknown(m)
}

var xxx_messageInfo_FaultAbort proto.InternalMessageInfo

type isFaultAbort_ErrorType interface {
	isFaultAbort_ErrorType()
}

type FaultAbort_HttpStatus struct {
	HttpStatus uint32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3,oneof"`
}

func (*FaultAbort_HttpStatus) isFaultAbort_ErrorType() {}

func (m *FaultAbort) GetErrorType() isFaultAbort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *FaultAbort) GetHttpStatus() uint32 {
	if x, ok := m.GetErrorType().(*FaultAbort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

func (m *FaultAbort) GetPercentage() *_type.FractionalPercent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FaultAbort) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FaultAbort_HttpStatus)(nil),
	}
}

type HTTPFault struct {
	// If specified, the filter will inject delays based on the values in the
	// object.
	Delay *v2.FaultDelay `protobuf:"bytes,1,opt,name=delay,proto3" json:"delay,omitempty"`
	// If specified, the filter will abort requests based on the values in
	// the object. At least *abort* or *delay* must be specified.
	Abort *FaultAbort `protobuf:"bytes,2,opt,name=abort,proto3" json:"abort,omitempty"`
	// Specifies the name of the (destination) upstream cluster that the
	// filter should match on. Fault injection will be restricted to requests
	// bound to the specific upstream cluster.
	UpstreamCluster string `protobuf:"bytes,3,opt,name=upstream_cluster,json=upstreamCluster,proto3" json:"upstream_cluster,omitempty"`
	// Specifies a set of headers that the filter should match on. The fault
	// injection filter can be applied selectively to requests that match a set of
	// headers specified in the fault filter config. The chances of actual fault
	// injection further depend on the value of the :ref:`percentage
	// <envoy_api_field_config.filter.http.fault.v2.FaultAbort.percentage>` field.
	// The filter will check the request's headers against all the specified
	// headers in the filter config. A match will happen if all the headers in the
	// config are present in the request with the same values (or based on
	// presence if the *value* field is not in the config).
	Headers []*route.HeaderMatcher `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	// Faults are injected for the specified list of downstream hosts. If this
	// setting is not set, faults are injected for all downstream nodes.
	// Downstream node name is taken from :ref:`the HTTP
	// x-envoy-downstream-service-node
	// <config_http_conn_man_headers_downstream-service-node>` header and compared
	// against downstream_nodes list.
	DownstreamNodes []string `protobuf:"bytes,5,rep,name=downstream_nodes,json=downstreamNodes,proto3" json:"downstream_nodes,omitempty"`
	// The maximum number of faults that can be active at a single time via the configured fault
	// filter. Note that because this setting can be overridden at the route level, it's possible
	// for the number of active faults to be greater than this value (if injected via a different
	// route). If not specified, defaults to unlimited. This setting can be overridden via
	// `runtime <config_http_filters_fault_injection_runtime>` and any faults that are not injected
	// due to overflow will be indicated via the `faults_overflow
	// <config_http_filters_fault_injection_stats>` stat.
	//
	// .. attention::
	//   Like other :ref:`circuit breakers <arch_overview_circuit_break>` in Envoy, this is a fuzzy
	//   limit. It's possible for the number of active faults to rise slightly above the configured
	//   amount due to the implementation details.
	MaxActiveFaults *types.UInt32Value `protobuf:"bytes,6,opt,name=max_active_faults,json=maxActiveFaults,proto3" json:"max_active_faults,omitempty"`
	// The response rate limit to be applied to the response body of the stream. When configured,
	// the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
	// <config_http_filters_fault_injection_runtime>` runtime key.
	//
	// .. attention::
	//  This is a per-stream limit versus a connection level limit. This means that concurrent streams
	//  will each get an independent limit.
	ResponseRateLimit    *v2.FaultRateLimit `protobuf:"bytes,7,opt,name=response_rate_limit,json=responseRateLimit,proto3" json:"response_rate_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HTTPFault) Reset()         { *m = HTTPFault{} }
func (m *HTTPFault) String() string { return proto.CompactTextString(m) }
func (*HTTPFault) ProtoMessage()    {}
func (*HTTPFault) Descriptor() ([]byte, []int) {
	return fileDescriptor_26070db6b6576d5c, []int{1}
}

func (m *HTTPFault) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPFault.Unmarshal(m, b)
}
func (m *HTTPFault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPFault.Marshal(b, m, deterministic)
}
func (m *HTTPFault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPFault.Merge(m, src)
}
func (m *HTTPFault) XXX_Size() int {
	return xxx_messageInfo_HTTPFault.Size(m)
}
func (m *HTTPFault) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPFault.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPFault proto.InternalMessageInfo

func (m *HTTPFault) GetDelay() *v2.FaultDelay {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *HTTPFault) GetAbort() *FaultAbort {
	if m != nil {
		return m.Abort
	}
	return nil
}

func (m *HTTPFault) GetUpstreamCluster() string {
	if m != nil {
		return m.UpstreamCluster
	}
	return ""
}

func (m *HTTPFault) GetHeaders() []*route.HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPFault) GetDownstreamNodes() []string {
	if m != nil {
		return m.DownstreamNodes
	}
	return nil
}

func (m *HTTPFault) GetMaxActiveFaults() *types.UInt32Value {
	if m != nil {
		return m.MaxActiveFaults
	}
	return nil
}

func (m *HTTPFault) GetResponseRateLimit() *v2.FaultRateLimit {
	if m != nil {
		return m.ResponseRateLimit
	}
	return nil
}

func init() {
	proto.RegisterType((*FaultAbort)(nil), "envoy.config.filter.http.fault.v2.FaultAbort")
	proto.RegisterType((*HTTPFault)(nil), "envoy.config.filter.http.fault.v2.HTTPFault")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/fault/v2/fault.proto", fileDescriptor_26070db6b6576d5c)
}

var fileDescriptor_26070db6b6576d5c = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x6b, 0x13, 0x41,
	0x14, 0x75, 0xf3, 0xd5, 0x76, 0x82, 0x34, 0x59, 0x1f, 0x5c, 0x82, 0x96, 0xb4, 0x4f, 0xab, 0xd8,
	0x19, 0xd8, 0x3e, 0x8a, 0x42, 0x37, 0x52, 0xa2, 0xa8, 0x84, 0xb5, 0xfa, 0x20, 0xc2, 0x72, 0x93,
	0xdc, 0x24, 0x0b, 0x9b, 0x9d, 0x61, 0x66, 0x76, 0x9b, 0xfc, 0x0f, 0x7f, 0x94, 0xe0, 0x1f, 0xf0,
	0xa7, 0x88, 0x4f, 0x32, 0x33, 0x59, 0xeb, 0x43, 0xa0, 0x7d, 0x59, 0x66, 0xef, 0x9c, 0x73, 0xcf,
	0x3d, 0x67, 0x2e, 0x39, 0xc7, 0xa2, 0xe2, 0x5b, 0x36, 0xe3, 0xc5, 0x22, 0x5b, 0xb2, 0x45, 0x96,
	0x6b, 0x94, 0x6c, 0xa5, 0xb5, 0x60, 0x0b, 0x28, 0x73, 0xcd, 0xaa, 0xc8, 0x1d, 0xa8, 0x90, 0x5c,
	0x73, 0xff, 0xd4, 0xc2, 0xa9, 0x83, 0x53, 0x07, 0xa7, 0x06, 0x4e, 0x1d, 0xaa, 0x8a, 0x06, 0x27,
	0xae, 0x23, 0x88, 0xcc, 0x90, 0x25, 0x2f, 0x35, 0xba, 0xaf, 0x6b, 0x31, 0x08, 0xf7, 0x29, 0xee,
	0x13, 0x1b, 0x04, 0x0e, 0xa9, 0xb7, 0x02, 0x99, 0x40, 0x39, 0xc3, 0xa2, 0xbe, 0x39, 0x59, 0x72,
	0xbe, 0xcc, 0x91, 0xd9, 0xbf, 0x69, 0xb9, 0x60, 0x37, 0x12, 0x84, 0x40, 0xa9, 0x76, 0xf7, 0x8f,
	0x2b, 0xc8, 0xb3, 0x39, 0x68, 0x64, 0xf5, 0xc1, 0x5d, 0x9c, 0x7d, 0xf7, 0x08, 0xb9, 0x32, 0x12,
	0x97, 0x53, 0x2e, 0xb5, 0x4f, 0x49, 0xd7, 0x0c, 0x9f, 0x2a, 0x0d, 0xba, 0x54, 0x41, 0x63, 0xe8,
	0x85, 0x0f, 0xe3, 0xee, 0x9f, 0xf8, 0xf0, 0x79, 0xa7, 0xf7, 0xab, 0x15, 0xfe, 0xf0, 0xc6, 0x0f,
	0x12, 0x62, 0x10, 0x9f, 0x2c, 0xc0, 0x7f, 0x45, 0xc8, 0x6e, 0x10, 0x58, 0x62, 0xd0, 0x1c, 0x7a,
	0x61, 0x37, 0x7a, 0x4a, 0x5d, 0x26, 0x66, 0x4c, 0x7a, 0x25, 0x61, 0xa6, 0x33, 0x5e, 0x40, 0x3e,
	0x71, 0xb8, 0xe4, 0x3f, 0x42, 0xdc, 0x27, 0x04, 0xa5, 0xe4, 0x32, 0x35, 0x58, 0xbf, 0xf9, 0x3b,
	0xf6, 0xde, 0xb5, 0x0e, 0xbd, 0x5e, 0xe3, 0xec, 0x67, 0x93, 0x1c, 0x8d, 0xaf, 0xaf, 0x27, 0x76,
	0x34, 0xff, 0x35, 0x69, 0xcf, 0x31, 0x87, 0x6d, 0xe0, 0x59, 0x81, 0x90, 0xee, 0x0b, 0xbd, 0xce,
	0x9b, 0x5a, 0xce, 0x1b, 0x83, 0x4f, 0x1c, 0xcd, 0x1f, 0x91, 0x36, 0x18, 0x7b, 0xd6, 0x4f, 0x37,
	0x3a, 0xa7, 0x77, 0x3e, 0x1a, 0xbd, 0xcd, 0x24, 0x71, 0x5c, 0xff, 0x19, 0xe9, 0x95, 0x42, 0x69,
	0x89, 0xb0, 0x4e, 0x67, 0x79, 0xa9, 0x34, 0x4a, 0x6b, 0xf8, 0x28, 0x39, 0xae, 0xeb, 0x23, 0x57,
	0xf6, 0x5f, 0x92, 0x83, 0x15, 0xc2, 0x1c, 0xa5, 0x0a, 0x5a, 0xc3, 0x66, 0xd8, 0x8d, 0x4e, 0x77,
	0x8a, 0x20, 0x32, 0xd3, 0xdc, 0xbd, 0xfe, 0xd8, 0x42, 0x3e, 0x80, 0x9e, 0xad, 0x50, 0x26, 0x35,
	0xc3, 0xe8, 0xcc, 0xf9, 0x4d, 0xb1, 0x53, 0x2a, 0xf8, 0x1c, 0x55, 0xd0, 0x1e, 0x36, 0x8d, 0xce,
	0x6d, 0xfd, 0xa3, 0x29, 0xfb, 0x63, 0xd2, 0x5f, 0xc3, 0x26, 0x35, 0x09, 0x57, 0x98, 0xda, 0xd9,
	0x55, 0xd0, 0xb1, 0x1e, 0x9f, 0x50, 0xb7, 0x11, 0xb4, 0xde, 0x08, 0xfa, 0xf9, 0x6d, 0xa1, 0x2f,
	0xa2, 0x2f, 0x90, 0x97, 0x98, 0x1c, 0xaf, 0x61, 0x73, 0x69, 0x59, 0xd6, 0xa7, 0xf2, 0xbf, 0x91,
	0x47, 0x12, 0x95, 0xe0, 0x85, 0xc2, 0x54, 0x82, 0xc6, 0x34, 0xcf, 0xd6, 0x99, 0x0e, 0x0e, 0x6c,
	0xaf, 0x17, 0xf7, 0xc8, 0x3b, 0x01, 0x8d, 0xef, 0x0d, 0x27, 0xe9, 0xd7, 0x8d, 0xfe, 0x95, 0xe2,
	0x11, 0x61, 0x19, 0x77, 0x4d, 0x84, 0xe4, 0x9b, 0xed, 0xdd, 0xf9, 0xc7, 0x6e, 0x29, 0x27, 0x66,
	0xf8, 0x89, 0xf7, 0xb5, 0x51, 0x45, 0xd3, 0x8e, 0x75, 0x72, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xcd, 0x78, 0xff, 0x9e, 0xa1, 0x03, 0x00, 0x00,
}
