// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/csrf/v2/csrf.proto

package v2

import (
	fmt "fmt"
	core "github.com/altipla-consulting/envoy-api/envoy/api/v2/core"
	matcher "github.com/altipla-consulting/envoy-api/envoy/type/matcher"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CSRF filter config.
type CsrfPolicy struct {
	// Specifies if CSRF is enabled.
	//
	// More information on how this can be controlled via runtime can be found
	// :ref:`here <csrf-runtime>`.
	//
	// .. note::
	//
	//   This field defaults to 100/:ref:`HUNDRED
	//   <envoy_api_enum_type.FractionalPercent.DenominatorType>`.
	FilterEnabled *core.RuntimeFractionalPercent `protobuf:"bytes,1,opt,name=filter_enabled,json=filterEnabled,proto3" json:"filter_enabled,omitempty"`
	// Specifies that CSRF policies will be evaluated and tracked, but not enforced.
	// This is intended to be used when filter_enabled is off.
	//
	// More information on how this can be controlled via runtime can be found
	// :ref:`here <csrf-runtime>`.
	//
	// .. note::
	//
	//   This field defaults to 100/:ref:`HUNDRED
	//   <envoy_api_enum_type.FractionalPercent.DenominatorType>`.
	ShadowEnabled *core.RuntimeFractionalPercent `protobuf:"bytes,2,opt,name=shadow_enabled,json=shadowEnabled,proto3" json:"shadow_enabled,omitempty"`
	// Specifies additional source origins that will be allowed in addition to
	// the destination origin.
	//
	// More information on how this can be configured via runtime can be found
	// :ref:`here <csrf-configuration>`.
	AdditionalOrigins    []*matcher.StringMatcher `protobuf:"bytes,3,rep,name=additional_origins,json=additionalOrigins,proto3" json:"additional_origins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CsrfPolicy) Reset()         { *m = CsrfPolicy{} }
func (m *CsrfPolicy) String() string { return proto.CompactTextString(m) }
func (*CsrfPolicy) ProtoMessage()    {}
func (*CsrfPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9146cdf92353980, []int{0}
}

func (m *CsrfPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CsrfPolicy.Unmarshal(m, b)
}
func (m *CsrfPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CsrfPolicy.Marshal(b, m, deterministic)
}
func (m *CsrfPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CsrfPolicy.Merge(m, src)
}
func (m *CsrfPolicy) XXX_Size() int {
	return xxx_messageInfo_CsrfPolicy.Size(m)
}
func (m *CsrfPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CsrfPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CsrfPolicy proto.InternalMessageInfo

func (m *CsrfPolicy) GetFilterEnabled() *core.RuntimeFractionalPercent {
	if m != nil {
		return m.FilterEnabled
	}
	return nil
}

func (m *CsrfPolicy) GetShadowEnabled() *core.RuntimeFractionalPercent {
	if m != nil {
		return m.ShadowEnabled
	}
	return nil
}

func (m *CsrfPolicy) GetAdditionalOrigins() []*matcher.StringMatcher {
	if m != nil {
		return m.AdditionalOrigins
	}
	return nil
}

func init() {
	proto.RegisterType((*CsrfPolicy)(nil), "envoy.config.filter.http.csrf.v2.CsrfPolicy")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/csrf/v2/csrf.proto", fileDescriptor_a9146cdf92353980)
}

var fileDescriptor_a9146cdf92353980 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x8a, 0x22, 0x5b, 0x5a, 0x35, 0x08, 0x96, 0x22, 0x58, 0x3d, 0x15, 0x0a, 0xbb,
	0x10, 0xdf, 0x20, 0xa2, 0x9e, 0xc4, 0x10, 0x6f, 0x22, 0x94, 0x6d, 0xb2, 0x49, 0x06, 0xd2, 0x9d,
	0xb0, 0x59, 0xa3, 0x79, 0x05, 0x4f, 0x3e, 0xaf, 0x27, 0xc9, 0x4e, 0x6a, 0x8f, 0xe2, 0x29, 0x93,
	0xcc, 0xf7, 0x7f, 0x0c, 0x7f, 0xd8, 0x4a, 0xe9, 0x16, 0x3b, 0x91, 0xa2, 0xce, 0xa1, 0x10, 0x39,
	0x54, 0x56, 0x19, 0x51, 0x5a, 0x5b, 0x8b, 0xb4, 0x31, 0xb9, 0x68, 0x43, 0xf7, 0xe4, 0xb5, 0x41,
	0x8b, 0xc1, 0xc2, 0xc1, 0x9c, 0x60, 0x4e, 0x30, 0xef, 0x61, 0xee, 0xa0, 0x36, 0x9c, 0x5f, 0x90,
	0x4e, 0xd6, 0xe0, 0xa2, 0x68, 0x94, 0xd8, 0xc8, 0x46, 0x51, 0x7e, 0x7e, 0x49, 0x5b, 0xdb, 0xd5,
	0x4a, 0x6c, 0xa5, 0x4d, 0x4b, 0x65, 0x44, 0x63, 0x0d, 0xe8, 0x62, 0x00, 0xce, 0x5b, 0x59, 0x41,
	0x26, 0xad, 0x12, 0xbb, 0x61, 0x58, 0x9c, 0x15, 0x58, 0xa0, 0x1b, 0x45, 0x3f, 0xd1, 0xd7, 0xeb,
	0x2f, 0x9f, 0xb1, 0xdb, 0xc6, 0xe4, 0x31, 0x56, 0x90, 0x76, 0xc1, 0x2b, 0x9b, 0xd2, 0x4d, 0x6b,
	0xa5, 0xe5, 0xa6, 0x52, 0xd9, 0xcc, 0x5b, 0x78, 0xcb, 0x71, 0xb8, 0xe2, 0x74, 0xb7, 0xac, 0x81,
	0xb7, 0x21, 0xef, 0xaf, 0xe2, 0xc9, 0x9b, 0xb6, 0xb0, 0x55, 0xf7, 0x46, 0xa6, 0x16, 0x50, 0xcb,
	0x2a, 0x56, 0x26, 0x55, 0xda, 0x46, 0x47, 0xdf, 0xd1, 0xc1, 0xa7, 0xe7, 0x9f, 0x78, 0xc9, 0x84,
	0x64, 0x77, 0xe4, 0x0a, 0x12, 0x36, 0x6d, 0x4a, 0x99, 0xe1, 0xfb, 0xaf, 0xdd, 0xff, 0xb7, 0x3d,
	0x99, 0x90, 0x62, 0xe7, 0x8c, 0x59, 0x20, 0xb3, 0x0c, 0x88, 0x59, 0xa3, 0x81, 0x02, 0x74, 0x33,
	0x1b, 0x2d, 0x46, 0xcb, 0x71, 0x78, 0x35, 0x78, 0xfb, 0xb6, 0xf8, 0xd0, 0x16, 0x7f, 0x76, 0x6d,
	0x3d, 0xd2, 0x5b, 0x72, 0xba, 0x0f, 0x3f, 0x51, 0x36, 0x7a, 0x60, 0x1c, 0x90, 0x92, 0xb5, 0xc1,
	0x8f, 0x8e, 0xff, 0xf5, 0xcb, 0xa2, 0xe3, 0x7d, 0x83, 0x71, 0xdf, 0x6a, 0xec, 0xbd, 0xf8, 0x6d,
	0xb8, 0x39, 0x74, 0x15, 0xdf, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x4a, 0x5a, 0x0e, 0x21,
	0x02, 0x00, 0x00,
}
