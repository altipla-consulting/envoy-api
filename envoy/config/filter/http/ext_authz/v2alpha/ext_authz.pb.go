// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto

package v2alpha

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/altipla-consulting/envoy-api/envoy/api/v2/core"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// External Authorization filter calls out to an external service over either:
//
//  1. gRPC Authorization API defined by :ref:`CheckRequest
//     <envoy_api_msg_service.auth.v2alpha.CheckRequest>`.
//  2. Raw HTTP Authorization server by passing the request headers to the service.
//
// A failed check will cause this filter to close the HTTP request normally with 403 (Forbidden),
// unless a different status code has been indicated in the authorization response.
type ExtAuthz struct {
	// Types that are valid to be assigned to Services:
	//	*ExtAuthz_GrpcService
	//	*ExtAuthz_HttpService
	Services isExtAuthz_Services `protobuf_oneof:"services"`
	// The filter's behaviour in case the external authorization service does
	// not respond back. When set to true, Envoy will also allow traffic in cases when
	// an error occurs during the authorization process.
	// Defaults to false.
	FailureModeAllow     bool     `protobuf:"varint,2,opt,name=failure_mode_allow,json=failureModeAllow,proto3" json:"failure_mode_allow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtAuthz) Reset()         { *m = ExtAuthz{} }
func (m *ExtAuthz) String() string { return proto.CompactTextString(m) }
func (*ExtAuthz) ProtoMessage()    {}
func (*ExtAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_ext_authz_b6235dcc0724be8e, []int{0}
}
func (m *ExtAuthz) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthz.Unmarshal(m, b)
}
func (m *ExtAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthz.Marshal(b, m, deterministic)
}
func (dst *ExtAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthz.Merge(dst, src)
}
func (m *ExtAuthz) XXX_Size() int {
	return xxx_messageInfo_ExtAuthz.Size(m)
}
func (m *ExtAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthz proto.InternalMessageInfo

type isExtAuthz_Services interface {
	isExtAuthz_Services()
}

type ExtAuthz_GrpcService struct {
	GrpcService *core.GrpcService `protobuf:"bytes,1,opt,name=grpc_service,json=grpcService,proto3,oneof"`
}

type ExtAuthz_HttpService struct {
	HttpService *HttpService `protobuf:"bytes,3,opt,name=http_service,json=httpService,proto3,oneof"`
}

func (*ExtAuthz_GrpcService) isExtAuthz_Services() {}

func (*ExtAuthz_HttpService) isExtAuthz_Services() {}

func (m *ExtAuthz) GetServices() isExtAuthz_Services {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *ExtAuthz) GetGrpcService() *core.GrpcService {
	if x, ok := m.GetServices().(*ExtAuthz_GrpcService); ok {
		return x.GrpcService
	}
	return nil
}

func (m *ExtAuthz) GetHttpService() *HttpService {
	if x, ok := m.GetServices().(*ExtAuthz_HttpService); ok {
		return x.HttpService
	}
	return nil
}

func (m *ExtAuthz) GetFailureModeAllow() bool {
	if m != nil {
		return m.FailureModeAllow
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExtAuthz) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExtAuthz_OneofMarshaler, _ExtAuthz_OneofUnmarshaler, _ExtAuthz_OneofSizer, []interface{}{
		(*ExtAuthz_GrpcService)(nil),
		(*ExtAuthz_HttpService)(nil),
	}
}

func _ExtAuthz_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExtAuthz)
	// services
	switch x := m.Services.(type) {
	case *ExtAuthz_GrpcService:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GrpcService); err != nil {
			return err
		}
	case *ExtAuthz_HttpService:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpService); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExtAuthz.Services has unexpected type %T", x)
	}
	return nil
}

func _ExtAuthz_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExtAuthz)
	switch tag {
	case 1: // services.grpc_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(core.GrpcService)
		err := b.DecodeMessage(msg)
		m.Services = &ExtAuthz_GrpcService{msg}
		return true, err
	case 3: // services.http_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpService)
		err := b.DecodeMessage(msg)
		m.Services = &ExtAuthz_HttpService{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExtAuthz_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExtAuthz)
	// services
	switch x := m.Services.(type) {
	case *ExtAuthz_GrpcService:
		s := proto.Size(x.GrpcService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExtAuthz_HttpService:
		s := proto.Size(x.HttpService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// External Authorization filter calls out to an upstream authorization server by passing the raw
// HTTP request headers to the server. This allows the authorization service to take a decision
// whether the request is authorized or not.
//
// A successful check allows the authorization service adding or overriding headers from the
// original request before dispatching it to the upstream. This is done by configuring which headers
// in the authorization response should be sent to the upstream. See *allowed_authorization_headers*
// below.
//
// A failed check will cause this filter to close the HTTP request with 403 (Forbidden),
// unless a different status code has been indicated by the authorization server via response
// headers.
//
// If an error happens during the checking process, two situations may occur depending on the
// filter's configuration:
//
//  1. When *failure_mode_allow* is true, traffic will be allowed in the presence of an error. This
//     includes any of the HTTP 5xx errors, or a communication failure between the filter and the
//     authorization server.
//  2. When *failure_mode_allow* is false, the filter will *always* return a *Forbidden response* to
//     the client. It will *not allow* traffic to the upstream in the presence of an error. This
//     includes any of the HTTP 5xx errors, or a communication failure between the filter and the
//     authorization server.
//
// Note that filter will produce stats on error. See *Statistics* at :ref:`configuration overview
// <config_http_filters_ext_authz>`.
type HttpService struct {
	// Sets the HTTP server URI which the authorization requests must be sent to.
	ServerUri *core.HttpUri `protobuf:"bytes,1,opt,name=server_uri,json=serverUri,proto3" json:"server_uri,omitempty"`
	// Sets an optional prefix to the value of authorization request header *Path*.
	PathPrefix string `protobuf:"bytes,2,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	// Sets a list of headers that can be sent from the authorization server to the upstream service,
	// or to the downstream client when present in the authorization response. Note that a matched
	// request header will have its value overridden by the ones sent from the authorization server.
	AllowedAuthorizationHeaders []string `protobuf:"bytes,4,rep,name=allowed_authorization_headers,json=allowedAuthorizationHeaders,proto3" json:"allowed_authorization_headers,omitempty"`
	// Sets a list of headers that should be sent *from the filter* to the authorization server
	// when they are also present in the client request. Note that *Content-Length*, *Authority*,
	// *Method* and *Path* are always dispatched to the authorization server by default. The message
	// will not contain body data and the *Content-Length* will be set to zero.
	AllowedRequestHeaders []string `protobuf:"bytes,5,rep,name=allowed_request_headers,json=allowedRequestHeaders,proto3" json:"allowed_request_headers,omitempty"`
	// Sets a list of headers and their values that will be added to the request to external
	// authorization server. Note that these will override the headers coming from the downstream.
	AuthorizationHeadersToAdd []*core.HeaderValue `protobuf:"bytes,6,rep,name=authorization_headers_to_add,json=authorizationHeadersToAdd,proto3" json:"authorization_headers_to_add,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}            `json:"-"`
	XXX_unrecognized          []byte              `json:"-"`
	XXX_sizecache             int32               `json:"-"`
}

func (m *HttpService) Reset()         { *m = HttpService{} }
func (m *HttpService) String() string { return proto.CompactTextString(m) }
func (*HttpService) ProtoMessage()    {}
func (*HttpService) Descriptor() ([]byte, []int) {
	return fileDescriptor_ext_authz_b6235dcc0724be8e, []int{1}
}
func (m *HttpService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpService.Unmarshal(m, b)
}
func (m *HttpService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpService.Marshal(b, m, deterministic)
}
func (dst *HttpService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpService.Merge(dst, src)
}
func (m *HttpService) XXX_Size() int {
	return xxx_messageInfo_HttpService.Size(m)
}
func (m *HttpService) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpService.DiscardUnknown(m)
}

var xxx_messageInfo_HttpService proto.InternalMessageInfo

func (m *HttpService) GetServerUri() *core.HttpUri {
	if m != nil {
		return m.ServerUri
	}
	return nil
}

func (m *HttpService) GetPathPrefix() string {
	if m != nil {
		return m.PathPrefix
	}
	return ""
}

func (m *HttpService) GetAllowedAuthorizationHeaders() []string {
	if m != nil {
		return m.AllowedAuthorizationHeaders
	}
	return nil
}

func (m *HttpService) GetAllowedRequestHeaders() []string {
	if m != nil {
		return m.AllowedRequestHeaders
	}
	return nil
}

func (m *HttpService) GetAuthorizationHeadersToAdd() []*core.HeaderValue {
	if m != nil {
		return m.AuthorizationHeadersToAdd
	}
	return nil
}

// Extra settings on a per virtualhost/route/weighter-cluster level.
type ExtAuthzPerRoute struct {
	// Types that are valid to be assigned to Override:
	//	*ExtAuthzPerRoute_Disabled
	//	*ExtAuthzPerRoute_CheckSettings
	Override             isExtAuthzPerRoute_Override `protobuf_oneof:"override"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ExtAuthzPerRoute) Reset()         { *m = ExtAuthzPerRoute{} }
func (m *ExtAuthzPerRoute) String() string { return proto.CompactTextString(m) }
func (*ExtAuthzPerRoute) ProtoMessage()    {}
func (*ExtAuthzPerRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_ext_authz_b6235dcc0724be8e, []int{2}
}
func (m *ExtAuthzPerRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthzPerRoute.Unmarshal(m, b)
}
func (m *ExtAuthzPerRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthzPerRoute.Marshal(b, m, deterministic)
}
func (dst *ExtAuthzPerRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthzPerRoute.Merge(dst, src)
}
func (m *ExtAuthzPerRoute) XXX_Size() int {
	return xxx_messageInfo_ExtAuthzPerRoute.Size(m)
}
func (m *ExtAuthzPerRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthzPerRoute.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthzPerRoute proto.InternalMessageInfo

type isExtAuthzPerRoute_Override interface {
	isExtAuthzPerRoute_Override()
}

type ExtAuthzPerRoute_Disabled struct {
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3,oneof"`
}

type ExtAuthzPerRoute_CheckSettings struct {
	CheckSettings *CheckSettings `protobuf:"bytes,2,opt,name=check_settings,json=checkSettings,proto3,oneof"`
}

func (*ExtAuthzPerRoute_Disabled) isExtAuthzPerRoute_Override() {}

func (*ExtAuthzPerRoute_CheckSettings) isExtAuthzPerRoute_Override() {}

func (m *ExtAuthzPerRoute) GetOverride() isExtAuthzPerRoute_Override {
	if m != nil {
		return m.Override
	}
	return nil
}

func (m *ExtAuthzPerRoute) GetDisabled() bool {
	if x, ok := m.GetOverride().(*ExtAuthzPerRoute_Disabled); ok {
		return x.Disabled
	}
	return false
}

func (m *ExtAuthzPerRoute) GetCheckSettings() *CheckSettings {
	if x, ok := m.GetOverride().(*ExtAuthzPerRoute_CheckSettings); ok {
		return x.CheckSettings
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExtAuthzPerRoute) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExtAuthzPerRoute_OneofMarshaler, _ExtAuthzPerRoute_OneofUnmarshaler, _ExtAuthzPerRoute_OneofSizer, []interface{}{
		(*ExtAuthzPerRoute_Disabled)(nil),
		(*ExtAuthzPerRoute_CheckSettings)(nil),
	}
}

func _ExtAuthzPerRoute_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExtAuthzPerRoute)
	// override
	switch x := m.Override.(type) {
	case *ExtAuthzPerRoute_Disabled:
		t := uint64(0)
		if x.Disabled {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ExtAuthzPerRoute_CheckSettings:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckSettings); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExtAuthzPerRoute.Override has unexpected type %T", x)
	}
	return nil
}

func _ExtAuthzPerRoute_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExtAuthzPerRoute)
	switch tag {
	case 1: // override.disabled
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Override = &ExtAuthzPerRoute_Disabled{x != 0}
		return true, err
	case 2: // override.check_settings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CheckSettings)
		err := b.DecodeMessage(msg)
		m.Override = &ExtAuthzPerRoute_CheckSettings{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExtAuthzPerRoute_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExtAuthzPerRoute)
	// override
	switch x := m.Override.(type) {
	case *ExtAuthzPerRoute_Disabled:
		n += 1 // tag and wire
		n += 1
	case *ExtAuthzPerRoute_CheckSettings:
		s := proto.Size(x.CheckSettings)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Extra settings for the check request. You can use this to provide extra context for the
// ext-authz server on specific virtual hosts \ routes. For example, adding a context extension on
// the virtual host level can give the ext-authz server information on what virtual host is used
// without needing to parse the host header.
// If CheckSettings is specified in multiple per-filter-configs, they will be merged in order,
// and the result will be be used.
type CheckSettings struct {
	// Context extensions to set on the CheckRequest's
	// :ref:`AttributeContext.context_extensions<envoy_api_field_service.auth.v2alpha.AttributeContext.context_extensions>`
	//
	// Merge semantics for this field are such that keys from more specific configs override.
	//
	// .. note::
	//
	//   These settings are only applied to a filter configured with a
	//   :ref:`grpc_service<envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.grpc_service>`.
	ContextExtensions    map[string]string `protobuf:"bytes,1,rep,name=context_extensions,json=contextExtensions,proto3" json:"context_extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CheckSettings) Reset()         { *m = CheckSettings{} }
func (m *CheckSettings) String() string { return proto.CompactTextString(m) }
func (*CheckSettings) ProtoMessage()    {}
func (*CheckSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_ext_authz_b6235dcc0724be8e, []int{3}
}
func (m *CheckSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckSettings.Unmarshal(m, b)
}
func (m *CheckSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckSettings.Marshal(b, m, deterministic)
}
func (dst *CheckSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckSettings.Merge(dst, src)
}
func (m *CheckSettings) XXX_Size() int {
	return xxx_messageInfo_CheckSettings.Size(m)
}
func (m *CheckSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckSettings.DiscardUnknown(m)
}

var xxx_messageInfo_CheckSettings proto.InternalMessageInfo

func (m *CheckSettings) GetContextExtensions() map[string]string {
	if m != nil {
		return m.ContextExtensions
	}
	return nil
}

func init() {
	proto.RegisterType((*ExtAuthz)(nil), "envoy.config.filter.http.ext_authz.v2alpha.ExtAuthz")
	proto.RegisterType((*HttpService)(nil), "envoy.config.filter.http.ext_authz.v2alpha.HttpService")
	proto.RegisterType((*ExtAuthzPerRoute)(nil), "envoy.config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute")
	proto.RegisterType((*CheckSettings)(nil), "envoy.config.filter.http.ext_authz.v2alpha.CheckSettings")
	proto.RegisterMapType((map[string]string)(nil), "envoy.config.filter.http.ext_authz.v2alpha.CheckSettings.ContextExtensionsEntry")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto", fileDescriptor_ext_authz_b6235dcc0724be8e)
}

var fileDescriptor_ext_authz_b6235dcc0724be8e = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xef, 0xe6, 0x4f, 0xdd, 0xbc, 0xb4, 0x92, 0x0e, 0x6a, 0x63, 0xac, 0x1a, 0x82, 0x60, 0x11,
	0xd9, 0x85, 0x08, 0x6a, 0x7b, 0x4b, 0x6a, 0x31, 0x08, 0x42, 0xd9, 0x5a, 0x0f, 0x22, 0x2c, 0xd3,
	0xdd, 0x97, 0xec, 0xd8, 0x75, 0x67, 0x9d, 0x9d, 0xac, 0x69, 0x2f, 0xde, 0xfd, 0x44, 0xe2, 0x41,
	0xfa, 0x01, 0x3c, 0xfb, 0x15, 0xa4, 0xdf, 0x42, 0x66, 0x66, 0xd3, 0xa4, 0x36, 0x82, 0x7a, 0xdb,
	0x79, 0xbf, 0x7f, 0xef, 0xbd, 0x99, 0x85, 0x6d, 0x4c, 0x72, 0x7e, 0xec, 0x06, 0x3c, 0x19, 0xb2,
	0x91, 0x3b, 0x64, 0xb1, 0x44, 0xe1, 0x46, 0x52, 0xa6, 0x2e, 0x4e, 0xa4, 0x4f, 0xc7, 0x32, 0x3a,
	0x71, 0xf3, 0x2e, 0x8d, 0xd3, 0x88, 0xce, 0x2a, 0x4e, 0x2a, 0xb8, 0xe4, 0xe4, 0x81, 0xd6, 0x3a,
	0x46, 0xeb, 0x18, 0xad, 0xa3, 0xb4, 0xce, 0x8c, 0x59, 0x68, 0x5b, 0x1b, 0x26, 0x87, 0xa6, 0xcc,
	0xcd, 0xbb, 0x6e, 0xc0, 0x05, 0xba, 0x87, 0x34, 0x43, 0xe3, 0xd4, 0xba, 0x77, 0x19, 0x1d, 0x89,
	0x34, 0xf0, 0x33, 0x14, 0x39, 0x0b, 0xa6, 0xac, 0xf6, 0x65, 0x96, 0x4a, 0xf3, 0xc7, 0x82, 0x15,
	0x8c, 0xf5, 0x9c, 0xc6, 0x2c, 0xa4, 0x12, 0xdd, 0xe9, 0x87, 0x01, 0x3a, 0x3f, 0x2d, 0xb0, 0x77,
	0x27, 0xb2, 0xa7, 0x7a, 0x22, 0x3b, 0xb0, 0x32, 0xef, 0xde, 0xb4, 0xda, 0xd6, 0x66, 0xbd, 0x7b,
	0xc7, 0x31, 0xe3, 0xd0, 0x94, 0x39, 0x79, 0xd7, 0x51, 0xf6, 0xce, 0x73, 0x91, 0x06, 0xfb, 0x86,
	0x35, 0x58, 0xf2, 0xea, 0xa3, 0xd9, 0x91, 0xbc, 0x85, 0x15, 0x1d, 0x3e, 0x35, 0x29, 0x6b, 0x93,
	0x27, 0xce, 0xdf, 0xef, 0xc4, 0x19, 0x48, 0x99, 0xce, 0xb9, 0x47, 0xb3, 0x23, 0x79, 0x08, 0x64,
	0x48, 0x59, 0x3c, 0x16, 0xe8, 0xbf, 0xe7, 0x21, 0xfa, 0x34, 0x8e, 0xf9, 0xc7, 0x66, 0xa9, 0x6d,
	0x6d, 0xda, 0x5e, 0xa3, 0x40, 0x5e, 0xf2, 0x10, 0x7b, 0xaa, 0xde, 0x07, 0xb0, 0x8b, 0x36, 0xb2,
	0xce, 0xf7, 0x12, 0xd4, 0xe7, 0x8c, 0xc9, 0x16, 0x80, 0xc2, 0x50, 0xa8, 0x35, 0x15, 0xa3, 0xb6,
	0x16, 0x8c, 0xaa, 0x34, 0x07, 0x82, 0x79, 0x35, 0xc3, 0x3e, 0x10, 0x8c, 0xdc, 0x85, 0x7a, 0x4a,
	0x65, 0xe4, 0xa7, 0x02, 0x87, 0x6c, 0xa2, 0xd3, 0x6b, 0x1e, 0xa8, 0xd2, 0x9e, 0xae, 0x90, 0x3e,
	0xdc, 0xd6, 0x8d, 0x61, 0xa8, 0x27, 0xe3, 0x82, 0x9d, 0x50, 0xc9, 0x78, 0xe2, 0x47, 0x48, 0x43,
	0x14, 0x59, 0xb3, 0xd2, 0x2e, 0x6f, 0xd6, 0xbc, 0x5b, 0x05, 0xa9, 0x37, 0xcf, 0x19, 0x18, 0x0a,
	0x79, 0x0c, 0xeb, 0x53, 0x0f, 0x81, 0x1f, 0xc6, 0x98, 0xc9, 0x73, 0x75, 0x55, 0xab, 0xaf, 0x17,
	0xb0, 0x67, 0xd0, 0xa9, 0xce, 0x87, 0x8d, 0x85, 0x99, 0xbe, 0xe4, 0x3e, 0x0d, 0xc3, 0xe6, 0x72,
	0xbb, 0xfc, 0x87, 0x4b, 0x35, 0x0e, 0xaf, 0x69, 0x3c, 0x46, 0xef, 0x26, 0x5d, 0xd0, 0xd3, 0x2b,
	0xde, 0x0b, 0xc3, 0x17, 0x15, 0xbb, 0xdc, 0xa8, 0x74, 0xbe, 0x59, 0xd0, 0x98, 0x3e, 0x9c, 0x3d,
	0x14, 0x1e, 0x1f, 0x4b, 0x24, 0xf7, 0xc1, 0x0e, 0x59, 0x46, 0x0f, 0x63, 0x0c, 0xf5, 0x46, 0xed,
	0x7e, 0xed, 0xeb, 0xd9, 0x69, 0xb9, 0xf2, 0xae, 0x64, 0x5b, 0x83, 0x25, 0xef, 0x1c, 0x24, 0x09,
	0x5c, 0x0d, 0x22, 0x0c, 0x8e, 0xfc, 0x0c, 0xa5, 0x64, 0xc9, 0x28, 0xd3, 0x4b, 0xac, 0x77, 0xb7,
	0xfe, 0xe5, 0x99, 0xec, 0x28, 0x87, 0xfd, 0xc2, 0xa0, 0x0f, 0x2a, 0xa9, 0xfa, 0xd9, 0x2a, 0x35,
	0x54, 0xd4, 0x6a, 0x70, 0x01, 0x5c, 0x03, 0x9b, 0xe7, 0x28, 0x04, 0x0b, 0x91, 0x54, 0xbf, 0x9c,
	0x9d, 0x96, 0xad, 0xce, 0x0f, 0x0b, 0x56, 0x2f, 0x38, 0x90, 0x4f, 0x40, 0x02, 0x9e, 0x48, 0x15,
	0x84, 0x13, 0x89, 0x49, 0xc6, 0x78, 0x92, 0x35, 0x2d, 0xbd, 0xaf, 0xbd, 0xff, 0x6e, 0xcc, 0xd9,
	0x31, 0x9e, 0xbb, 0xe7, 0x96, 0xbb, 0x89, 0x14, 0xc7, 0xde, 0x5a, 0xf0, 0x7b, 0xbd, 0xf5, 0x0c,
	0x6e, 0x2c, 0x26, 0x93, 0x06, 0x94, 0x8f, 0xf0, 0x58, 0xef, 0xb4, 0xe6, 0xa9, 0x4f, 0x72, 0x0d,
	0xaa, 0xb9, 0xba, 0xa9, 0xe2, 0xf5, 0x99, 0xc3, 0x76, 0xe9, 0xa9, 0xd5, 0xaf, 0xbd, 0xb9, 0x52,
	0x34, 0x72, 0xb8, 0xac, 0x7f, 0xf2, 0x47, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x61, 0x79, 0x4d,
	0x02, 0xcd, 0x04, 0x00, 0x00,
}
