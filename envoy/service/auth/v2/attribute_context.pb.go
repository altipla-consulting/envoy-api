// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/service/auth/v2/attribute_context.proto

package envoy_service_auth_v2

import (
	fmt "fmt"
	core "github.com/altipla-consulting/envoy-api/envoy/api/v2/core"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An attribute is a piece of metadata that describes an activity on a network.
// For example, the size of an HTTP request, or the status code of an HTTP response.
//
// Each attribute has a type and a name, which is logically defined as a proto message field
// of the `AttributeContext`. The `AttributeContext` is a collection of individual attributes
// supported by Envoy authorization system.
// [#comment: The following items are left out of this proto
// Request.Auth field for jwt tokens
// Request.Api for api management
// Origin peer that originated the request
// Caching Protocol
// request_context return values to inject back into the filter chain
// peer.claims -- from X.509 extensions
// Configuration
// - field mask to send
// - which return values from request_context are copied back
// - which return values are copied into request_headers]
// [#next-free-field: 12]
type AttributeContext struct {
	// The source of a network activity, such as starting a TCP connection.
	// In a multi hop network activity, the source represents the sender of the
	// last hop.
	Source *AttributeContext_Peer `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The destination of a network activity, such as accepting a TCP connection.
	// In a multi hop network activity, the destination represents the receiver of
	// the last hop.
	Destination *AttributeContext_Peer `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Represents a network request, such as an HTTP request.
	Request *AttributeContext_Request `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	// This is analogous to http_request.headers, however these contents will not be sent to the
	// upstream server. Context_extensions provide an extension mechanism for sending additional
	// information to the auth server without modifying the proto definition. It maps to the
	// internal opaque context in the filter chain.
	ContextExtensions map[string]string `protobuf:"bytes,10,rep,name=context_extensions,json=contextExtensions,proto3" json:"context_extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Dynamic metadata associated with the request.
	MetadataContext      *core.Metadata `protobuf:"bytes,11,opt,name=metadata_context,json=metadataContext,proto3" json:"metadata_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AttributeContext) Reset()         { *m = AttributeContext{} }
func (m *AttributeContext) String() string { return proto.CompactTextString(m) }
func (*AttributeContext) ProtoMessage()    {}
func (*AttributeContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6030c9468e3591b, []int{0}
}

func (m *AttributeContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeContext.Unmarshal(m, b)
}
func (m *AttributeContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeContext.Marshal(b, m, deterministic)
}
func (m *AttributeContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeContext.Merge(m, src)
}
func (m *AttributeContext) XXX_Size() int {
	return xxx_messageInfo_AttributeContext.Size(m)
}
func (m *AttributeContext) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeContext.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeContext proto.InternalMessageInfo

func (m *AttributeContext) GetSource() *AttributeContext_Peer {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *AttributeContext) GetDestination() *AttributeContext_Peer {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *AttributeContext) GetRequest() *AttributeContext_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *AttributeContext) GetContextExtensions() map[string]string {
	if m != nil {
		return m.ContextExtensions
	}
	return nil
}

func (m *AttributeContext) GetMetadataContext() *core.Metadata {
	if m != nil {
		return m.MetadataContext
	}
	return nil
}

// This message defines attributes for a node that handles a network request.
// The node can be either a service or an application that sends, forwards,
// or receives the request. Service peers should fill in the `service`,
// `principal`, and `labels` as appropriate.
type AttributeContext_Peer struct {
	// The address of the peer, this is typically the IP address.
	// It can also be UDS path, or others.
	Address *core.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The canonical service name of the peer.
	// It should be set to :ref:`the HTTP x-envoy-downstream-service-cluster
	// <config_http_conn_man_headers_downstream-service-cluster>`
	// If a more trusted source of the service name is available through mTLS/secure naming, it
	// should be used.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// The labels associated with the peer.
	// These could be pod labels for Kubernetes or tags for VMs.
	// The source of the labels could be an X.509 certificate or other configuration.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The authenticated identity of this peer.
	// For example, the identity associated with the workload such as a service account.
	// If an X.509 certificate is used to assert the identity this field should be sourced from
	// `URI Subject Alternative Names`, `DNS Subject Alternate Names` or `Subject` in that order.
	// The primary identity should be the principal. The principal format is issuer specific.
	//
	// Example:
	// *    SPIFFE format is `spiffe://trust-domain/path`
	// *    Google account format is `https://accounts.google.com/{userid}`
	Principal            string   `protobuf:"bytes,4,opt,name=principal,proto3" json:"principal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttributeContext_Peer) Reset()         { *m = AttributeContext_Peer{} }
func (m *AttributeContext_Peer) String() string { return proto.CompactTextString(m) }
func (*AttributeContext_Peer) ProtoMessage()    {}
func (*AttributeContext_Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6030c9468e3591b, []int{0, 0}
}

func (m *AttributeContext_Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeContext_Peer.Unmarshal(m, b)
}
func (m *AttributeContext_Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeContext_Peer.Marshal(b, m, deterministic)
}
func (m *AttributeContext_Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeContext_Peer.Merge(m, src)
}
func (m *AttributeContext_Peer) XXX_Size() int {
	return xxx_messageInfo_AttributeContext_Peer.Size(m)
}
func (m *AttributeContext_Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeContext_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeContext_Peer proto.InternalMessageInfo

func (m *AttributeContext_Peer) GetAddress() *core.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AttributeContext_Peer) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *AttributeContext_Peer) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *AttributeContext_Peer) GetPrincipal() string {
	if m != nil {
		return m.Principal
	}
	return ""
}

// Represents a network request, such as an HTTP request.
type AttributeContext_Request struct {
	// The timestamp when the proxy receives the first byte of the request.
	Time *types.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Represents an HTTP request or an HTTP-like request.
	Http                 *AttributeContext_HttpRequest `protobuf:"bytes,2,opt,name=http,proto3" json:"http,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AttributeContext_Request) Reset()         { *m = AttributeContext_Request{} }
func (m *AttributeContext_Request) String() string { return proto.CompactTextString(m) }
func (*AttributeContext_Request) ProtoMessage()    {}
func (*AttributeContext_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6030c9468e3591b, []int{0, 1}
}

func (m *AttributeContext_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeContext_Request.Unmarshal(m, b)
}
func (m *AttributeContext_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeContext_Request.Marshal(b, m, deterministic)
}
func (m *AttributeContext_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeContext_Request.Merge(m, src)
}
func (m *AttributeContext_Request) XXX_Size() int {
	return xxx_messageInfo_AttributeContext_Request.Size(m)
}
func (m *AttributeContext_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeContext_Request.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeContext_Request proto.InternalMessageInfo

func (m *AttributeContext_Request) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *AttributeContext_Request) GetHttp() *AttributeContext_HttpRequest {
	if m != nil {
		return m.Http
	}
	return nil
}

// This message defines attributes for an HTTP request.
// HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
// [#next-free-field: 12]
type AttributeContext_HttpRequest struct {
	// The unique ID for a request, which can be propagated to downstream
	// systems. The ID should have low probability of collision
	// within a single day for a specific service.
	// For HTTP requests, it should be X-Request-ID or equivalent.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The HTTP request method, such as `GET`, `POST`.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// The HTTP request headers. If multiple headers share the same key, they
	// must be merged according to the HTTP spec. All header keys must be
	// lower-cased, because HTTP header keys are case-insensitive.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The request target, as it appears in the first line of the HTTP request. This includes
	// the URL path and query-string. No decoding is performed.
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// The HTTP request `Host` or 'Authority` header value.
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// The HTTP URL scheme, such as `http` and `https`.
	Scheme string `protobuf:"bytes,6,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// This field is always empty, and exists for compatibility reasons. The HTTP URL query is
	// included in `path` field.
	Query string `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	// This field is always empty, and exists for compatibility reasons. The URL fragment is
	// not submitted as part of HTTP requests; it is unknowable.
	Fragment string `protobuf:"bytes,8,opt,name=fragment,proto3" json:"fragment,omitempty"`
	// The HTTP request size in bytes. If unknown, it must be -1.
	Size int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
	//
	// See :repo:`headers.h:ProtocolStrings <source/common/http/headers.h>` for a list of all
	// possible values.
	Protocol string `protobuf:"bytes,10,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// The HTTP request body.
	Body                 string   `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttributeContext_HttpRequest) Reset()         { *m = AttributeContext_HttpRequest{} }
func (m *AttributeContext_HttpRequest) String() string { return proto.CompactTextString(m) }
func (*AttributeContext_HttpRequest) ProtoMessage()    {}
func (*AttributeContext_HttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6030c9468e3591b, []int{0, 2}
}

func (m *AttributeContext_HttpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeContext_HttpRequest.Unmarshal(m, b)
}
func (m *AttributeContext_HttpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeContext_HttpRequest.Marshal(b, m, deterministic)
}
func (m *AttributeContext_HttpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeContext_HttpRequest.Merge(m, src)
}
func (m *AttributeContext_HttpRequest) XXX_Size() int {
	return xxx_messageInfo_AttributeContext_HttpRequest.Size(m)
}
func (m *AttributeContext_HttpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeContext_HttpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeContext_HttpRequest proto.InternalMessageInfo

func (m *AttributeContext_HttpRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *AttributeContext_HttpRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetFragment() string {
	if m != nil {
		return m.Fragment
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *AttributeContext_HttpRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*AttributeContext)(nil), "envoy.service.auth.v2.AttributeContext")
	proto.RegisterMapType((map[string]string)(nil), "envoy.service.auth.v2.AttributeContext.ContextExtensionsEntry")
	proto.RegisterType((*AttributeContext_Peer)(nil), "envoy.service.auth.v2.AttributeContext.Peer")
	proto.RegisterMapType((map[string]string)(nil), "envoy.service.auth.v2.AttributeContext.Peer.LabelsEntry")
	proto.RegisterType((*AttributeContext_Request)(nil), "envoy.service.auth.v2.AttributeContext.Request")
	proto.RegisterType((*AttributeContext_HttpRequest)(nil), "envoy.service.auth.v2.AttributeContext.HttpRequest")
	proto.RegisterMapType((map[string]string)(nil), "envoy.service.auth.v2.AttributeContext.HttpRequest.HeadersEntry")
}

func init() {
	proto.RegisterFile("envoy/service/auth/v2/attribute_context.proto", fileDescriptor_a6030c9468e3591b)
}

var fileDescriptor_a6030c9468e3591b = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcf, 0x4f, 0xdb, 0x4a,
	0x10, 0x56, 0x7e, 0x90, 0xe0, 0xc9, 0xd3, 0x7b, 0xbc, 0xd5, 0x03, 0x59, 0x7e, 0x48, 0xa0, 0xf6,
	0xc2, 0xa1, 0x5d, 0x4b, 0xa1, 0x07, 0xca, 0x01, 0x15, 0x0a, 0x2d, 0x95, 0xda, 0x2a, 0xb2, 0x7a,
	0xea, 0x05, 0x6d, 0xec, 0x01, 0xaf, 0x1a, 0x7b, 0xcd, 0xee, 0x3a, 0x22, 0xbd, 0xb5, 0xfd, 0xc3,
	0x5b, 0xed, 0x2f, 0x1a, 0xd1, 0x1c, 0x80, 0x53, 0x66, 0xc6, 0xdf, 0x7c, 0x3b, 0xf3, 0x7d, 0x13,
	0x78, 0x8e, 0xf5, 0x5c, 0x2c, 0x52, 0x85, 0x72, 0xce, 0x73, 0x4c, 0x59, 0xab, 0xcb, 0x74, 0x3e,
	0x4e, 0x99, 0xd6, 0x92, 0x4f, 0x5b, 0x8d, 0x17, 0xb9, 0xa8, 0x35, 0xde, 0x68, 0xda, 0x48, 0xa1,
	0x05, 0xd9, 0xb4, 0x70, 0xea, 0xe1, 0xd4, 0xc0, 0xe9, 0x7c, 0x9c, 0xec, 0x38, 0x16, 0xd6, 0x70,
	0xd3, 0x9c, 0x0b, 0x89, 0x29, 0x2b, 0x0a, 0x89, 0x4a, 0xb9, 0xbe, 0x64, 0xfb, 0x4f, 0xc0, 0x94,
	0x29, 0xf4, 0x5f, 0x77, 0xae, 0x84, 0xb8, 0x9a, 0x61, 0x6a, 0xb3, 0x69, 0x7b, 0x99, 0x6a, 0x5e,
	0xa1, 0xd2, 0xac, 0x6a, 0x1c, 0xe0, 0xc9, 0xcf, 0x08, 0x36, 0x8e, 0xc3, 0x48, 0xaf, 0xdd, 0x44,
	0xe4, 0x14, 0x06, 0x4a, 0xb4, 0x32, 0xc7, 0xb8, 0xb3, 0xdb, 0xd9, 0x1b, 0x8d, 0x9f, 0xd1, 0x95,
	0xc3, 0xd1, 0xbb, 0x8d, 0x74, 0x82, 0x28, 0x33, 0xdf, 0x4b, 0x3e, 0xc2, 0xa8, 0x40, 0xa5, 0x79,
	0xcd, 0x34, 0x17, 0x75, 0xdc, 0x7d, 0x04, 0xd5, 0x32, 0x01, 0x79, 0x07, 0x43, 0x89, 0xd7, 0x2d,
	0x2a, 0x1d, 0xf7, 0x2d, 0x57, 0x7a, 0x5f, 0xae, 0xcc, 0xb5, 0x65, 0xa1, 0x9f, 0x54, 0x40, 0xbc,
	0xfa, 0x17, 0x78, 0xa3, 0xb1, 0x56, 0x5c, 0xd4, 0x2a, 0x86, 0xdd, 0xde, 0xde, 0x68, 0x7c, 0x74,
	0x5f, 0x56, 0xff, 0x7b, 0x76, 0x4b, 0x70, 0x56, 0x6b, 0xb9, 0xc8, 0xfe, 0xcd, 0xef, 0xd6, 0xc9,
	0x1b, 0xd8, 0xa8, 0x50, 0xb3, 0x82, 0x69, 0x16, 0x5c, 0x8f, 0x47, 0x76, 0x85, 0xff, 0xfd, 0x63,
	0xac, 0xe1, 0xe6, 0x0d, 0x63, 0x1f, 0xfd, 0xe0, 0xa1, 0xd9, 0x3f, 0xa1, 0xc9, 0xbf, 0x94, 0x7c,
	0xeb, 0x42, 0xdf, 0xe8, 0x42, 0x5e, 0xc0, 0xd0, 0x5f, 0x81, 0x77, 0x28, 0x59, 0xc1, 0x73, 0xec,
	0x10, 0x59, 0x80, 0x92, 0x18, 0x86, 0x7e, 0x29, 0x6b, 0x46, 0x94, 0x85, 0x94, 0x4c, 0x60, 0x30,
	0x63, 0x53, 0x9c, 0xa9, 0xb8, 0x67, 0x35, 0x38, 0x78, 0x88, 0x4b, 0xf4, 0xbd, 0x6d, 0x75, 0xdb,
	0x7b, 0x1e, 0xb2, 0x0d, 0x51, 0x23, 0x79, 0x9d, 0xf3, 0x86, 0xcd, 0xac, 0x5d, 0x51, 0xf6, 0xbb,
	0x90, 0xbc, 0x84, 0xd1, 0x52, 0x13, 0xd9, 0x80, 0xde, 0x17, 0x5c, 0xd8, 0x55, 0xa2, 0xcc, 0x84,
	0xe4, 0x3f, 0x58, 0x9b, 0xb3, 0x59, 0x1b, 0x06, 0x75, 0xc9, 0x61, 0xf7, 0xa0, 0x93, 0x7c, 0xef,
	0xc0, 0xd0, 0xfb, 0x49, 0x28, 0xf4, 0xcd, 0x3d, 0xdf, 0x6a, 0xe0, 0x8e, 0x9d, 0x86, 0x63, 0xa7,
	0x9f, 0xc2, 0xb1, 0x67, 0x16, 0x47, 0xde, 0x42, 0xbf, 0xd4, 0xba, 0xf1, 0xa7, 0xb8, 0x7f, 0xdf,
	0x25, 0xcf, 0xb5, 0x6e, 0xc2, 0x09, 0x59, 0x82, 0xe4, 0x47, 0x0f, 0x46, 0x4b, 0x55, 0xf2, 0x37,
	0x74, 0x79, 0xe1, 0xe7, 0xef, 0xf2, 0x82, 0x6c, 0xc1, 0xa0, 0x42, 0x5d, 0x8a, 0xc2, 0xcf, 0xef,
	0x33, 0xf2, 0x19, 0x86, 0x25, 0xb2, 0x02, 0x65, 0x10, 0xfa, 0xd5, 0x23, 0x66, 0xa0, 0xe7, 0x8e,
	0xc2, 0x09, 0x1e, 0x08, 0x09, 0x81, 0x7e, 0xc3, 0x74, 0xe9, 0xc5, 0xb6, 0xb1, 0xa9, 0x95, 0x42,
	0xe9, 0x78, 0xcd, 0xd5, 0x4c, 0x6c, 0x66, 0x53, 0x79, 0x89, 0x15, 0xc6, 0x03, 0x37, 0x9b, 0xcb,
	0x8c, 0xe4, 0xd7, 0x2d, 0xca, 0x45, 0x3c, 0x74, 0x92, 0xdb, 0x84, 0x24, 0xb0, 0x7e, 0x29, 0xd9,
	0x55, 0x85, 0xb5, 0x8e, 0xd7, 0xed, 0x87, 0xdb, 0xdc, 0xb0, 0x2b, 0xfe, 0x15, 0xe3, 0x68, 0xb7,
	0xb3, 0xd7, 0xcb, 0x6c, 0x6c, 0xf0, 0x56, 0xfe, 0x5c, 0xcc, 0x62, 0x70, 0xf8, 0x90, 0x1b, 0xfc,
	0x54, 0x14, 0x0b, 0x7b, 0xfa, 0x51, 0x66, 0xe3, 0xe4, 0x10, 0xfe, 0x5a, 0x5e, 0xe7, 0x41, 0xa7,
	0x70, 0x0a, 0x5b, 0xab, 0xff, 0x83, 0x0f, 0x61, 0x39, 0x39, 0x82, 0xa7, 0x5c, 0x38, 0x1b, 0x1a,
	0x29, 0x6e, 0x16, 0xab, 0x1d, 0x39, 0xd9, 0xbc, 0x6b, 0xc9, 0xc4, 0xac, 0x35, 0xe9, 0x4c, 0x07,
	0x76, 0xbf, 0xfd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x0a, 0x10, 0x8d, 0xf0, 0x05, 0x00,
	0x00,
}
