// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/admin/v2alpha/memory.proto

package envoy_admin_v2alpha

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Proto representation of the internal memory consumption of an Envoy instance. These represent
// values extracted from an internal TCMalloc instance. For more information, see the section of the
// docs entitled ["Generic Tcmalloc Status"](http://gperftools.github.io/gperftools/tcmalloc.html).
type Memory struct {
	// The number of bytes allocated by the heap for Envoy. This is an alias for
	// `generic.current_allocated_bytes`.
	Allocated uint64 `protobuf:"varint,1,opt,name=allocated,proto3" json:"allocated,omitempty"`
	// The number of bytes reserved by the heap but not necessarily allocated. This is an alias for
	// `generic.heap_size`.
	HeapSize uint64 `protobuf:"varint,2,opt,name=heap_size,json=heapSize,proto3" json:"heap_size,omitempty"`
	// The number of bytes in free, unmapped pages in the page heap. These bytes always count towards
	// virtual memory usage, and depending on the OS, typically do not count towards physical memory
	// usage. This is an alias for `tcmalloc.pageheap_unmapped_bytes`.
	PageheapUnmapped uint64 `protobuf:"varint,3,opt,name=pageheap_unmapped,json=pageheapUnmapped,proto3" json:"pageheap_unmapped,omitempty"`
	// The number of bytes in free, mapped pages in the page heap. These bytes always count towards
	// virtual memory usage, and unless the underlying memory is swapped out by the OS, they also
	// count towards physical memory usage. This is an alias for `tcmalloc.pageheap_free_bytes`.
	PageheapFree uint64 `protobuf:"varint,4,opt,name=pageheap_free,json=pageheapFree,proto3" json:"pageheap_free,omitempty"`
	// The amount of memory used by the TCMalloc thread caches (for small objects). This is an alias
	// for `tcmalloc.current_total_thread_cache_bytes`.
	TotalThreadCache     uint64   `protobuf:"varint,5,opt,name=total_thread_cache,json=totalThreadCache,proto3" json:"total_thread_cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Memory) Reset()         { *m = Memory{} }
func (m *Memory) String() string { return proto.CompactTextString(m) }
func (*Memory) ProtoMessage()    {}
func (*Memory) Descriptor() ([]byte, []int) {
	return fileDescriptor_memory_e68d8905e7c7db6c, []int{0}
}
func (m *Memory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Memory.Unmarshal(m, b)
}
func (m *Memory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Memory.Marshal(b, m, deterministic)
}
func (dst *Memory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Memory.Merge(dst, src)
}
func (m *Memory) XXX_Size() int {
	return xxx_messageInfo_Memory.Size(m)
}
func (m *Memory) XXX_DiscardUnknown() {
	xxx_messageInfo_Memory.DiscardUnknown(m)
}

var xxx_messageInfo_Memory proto.InternalMessageInfo

func (m *Memory) GetAllocated() uint64 {
	if m != nil {
		return m.Allocated
	}
	return 0
}

func (m *Memory) GetHeapSize() uint64 {
	if m != nil {
		return m.HeapSize
	}
	return 0
}

func (m *Memory) GetPageheapUnmapped() uint64 {
	if m != nil {
		return m.PageheapUnmapped
	}
	return 0
}

func (m *Memory) GetPageheapFree() uint64 {
	if m != nil {
		return m.PageheapFree
	}
	return 0
}

func (m *Memory) GetTotalThreadCache() uint64 {
	if m != nil {
		return m.TotalThreadCache
	}
	return 0
}

func init() {
	proto.RegisterType((*Memory)(nil), "envoy.admin.v2alpha.Memory")
}

func init() {
	proto.RegisterFile("envoy/admin/v2alpha/memory.proto", fileDescriptor_memory_e68d8905e7c7db6c)
}

var fileDescriptor_memory_e68d8905e7c7db6c = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0xcf, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc7, 0x71, 0xa2, 0x31, 0x98, 0x45, 0x41, 0xd7, 0xcb, 0x82, 0x1e, 0x82, 0x5e, 0x04, 0x25,
	0x01, 0x7d, 0x84, 0x42, 0x6f, 0xbd, 0xf4, 0xcf, 0x39, 0x4c, 0xb3, 0xd3, 0x6e, 0x60, 0x37, 0xbb,
	0x6c, 0xb7, 0x81, 0xe4, 0xf5, 0xfa, 0x62, 0x25, 0xd3, 0xa4, 0xbd, 0x7e, 0x7f, 0x1f, 0x06, 0x86,
	0x65, 0xd8, 0xb4, 0xb6, 0x2b, 0x40, 0x9a, 0xba, 0x29, 0xda, 0x3f, 0xd0, 0x4e, 0x41, 0x61, 0xd0,
	0x58, 0xdf, 0xe5, 0xce, 0xdb, 0x60, 0xf9, 0x1b, 0x89, 0x9c, 0x44, 0x3e, 0x8a, 0xcf, 0x53, 0xc4,
	0x92, 0x05, 0x29, 0xfe, 0xc1, 0x52, 0xd0, 0xda, 0x56, 0x10, 0x50, 0x8a, 0x28, 0x8b, 0xbe, 0xe3,
	0xe5, 0x2d, 0xf0, 0x77, 0x96, 0x2a, 0x04, 0x57, 0x1e, 0xea, 0x1e, 0xc5, 0x1d, 0xad, 0x8f, 0x43,
	0x58, 0xd5, 0x3d, 0xf2, 0x1f, 0xf6, 0xea, 0x60, 0x8f, 0x04, 0x8e, 0x8d, 0x01, 0xe7, 0x50, 0x8a,
	0x7b, 0x42, 0x2f, 0xd3, 0xb0, 0x19, 0x3b, 0xff, 0x62, 0xcf, 0x57, 0xbc, 0xf3, 0x88, 0x22, 0x26,
	0xf8, 0x34, 0xc5, 0xb9, 0x47, 0xe4, 0xbf, 0x8c, 0x07, 0x1b, 0x40, 0x97, 0x41, 0x79, 0x04, 0x59,
	0x56, 0x50, 0x29, 0x14, 0x0f, 0x97, 0x93, 0xb4, 0xac, 0x69, 0x98, 0x0d, 0x7d, 0x9b, 0xd0, 0x87,
	0xff, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x62, 0x96, 0x8d, 0x05, 0x01, 0x00, 0x00,
}
