// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/admin/v2alpha/mutex_stats.proto

package envoy_admin_v2alpha

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Proto representation of the statistics collected upon absl::Mutex contention, if Envoy is run
// under :option:`--enable-mutex-tracing`. For more information, see the `absl::Mutex`
// [docs](https://abseil.io/about/design/mutex#extra-features).
//
// *NB*: The wait cycles below are measured by `absl::base_internal::CycleClock`, and may not
// correspond to core clock frequency. For more information, see the `CycleClock`
// [docs](https://github.com/abseil/abseil-cpp/blob/master/absl/base/internal/cycleclock.h).
type MutexStats struct {
	// The number of individual mutex contentions which have occurred since startup.
	NumContentions uint64 `protobuf:"varint,1,opt,name=num_contentions,json=numContentions,proto3" json:"num_contentions,omitempty"`
	// The length of the current contention wait cycle.
	CurrentWaitCycles uint64 `protobuf:"varint,2,opt,name=current_wait_cycles,json=currentWaitCycles,proto3" json:"current_wait_cycles,omitempty"`
	// The lifetime total of all contention wait cycles.
	LifetimeWaitCycles   uint64   `protobuf:"varint,3,opt,name=lifetime_wait_cycles,json=lifetimeWaitCycles,proto3" json:"lifetime_wait_cycles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MutexStats) Reset()         { *m = MutexStats{} }
func (m *MutexStats) String() string { return proto.CompactTextString(m) }
func (*MutexStats) ProtoMessage()    {}
func (*MutexStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_mutex_stats_6e224bd1527e000c, []int{0}
}
func (m *MutexStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MutexStats.Unmarshal(m, b)
}
func (m *MutexStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MutexStats.Marshal(b, m, deterministic)
}
func (dst *MutexStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutexStats.Merge(dst, src)
}
func (m *MutexStats) XXX_Size() int {
	return xxx_messageInfo_MutexStats.Size(m)
}
func (m *MutexStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MutexStats.DiscardUnknown(m)
}

var xxx_messageInfo_MutexStats proto.InternalMessageInfo

func (m *MutexStats) GetNumContentions() uint64 {
	if m != nil {
		return m.NumContentions
	}
	return 0
}

func (m *MutexStats) GetCurrentWaitCycles() uint64 {
	if m != nil {
		return m.CurrentWaitCycles
	}
	return 0
}

func (m *MutexStats) GetLifetimeWaitCycles() uint64 {
	if m != nil {
		return m.LifetimeWaitCycles
	}
	return 0
}

func init() {
	proto.RegisterType((*MutexStats)(nil), "envoy.admin.v2alpha.MutexStats")
}

func init() {
	proto.RegisterFile("envoy/admin/v2alpha/mutex_stats.proto", fileDescriptor_mutex_stats_6e224bd1527e000c)
}

var fileDescriptor_mutex_stats_6e224bd1527e000c = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xce, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0xc6, 0x71, 0xaa, 0xe2, 0x90, 0x41, 0x31, 0x75, 0xe8, 0x28, 0x82, 0xe8, 0x94, 0x8a, 0x3e,
	0x42, 0x67, 0x17, 0x1d, 0x1c, 0x43, 0x8c, 0x27, 0x06, 0x9a, 0x4b, 0x69, 0x2e, 0xd5, 0x3e, 0x89,
	0xaf, 0x2b, 0x0d, 0x95, 0xe2, 0x7a, 0xdf, 0xef, 0x0f, 0xc7, 0x36, 0x80, 0x8d, 0x6b, 0x73, 0x75,
	0xb7, 0x06, 0xf3, 0xe6, 0xa0, 0xca, 0xea, 0xa9, 0x72, 0x1b, 0x08, 0xde, 0xd2, 0x93, 0x22, 0x2f,
	0xaa, 0xda, 0x91, 0xe3, 0x69, 0x64, 0x22, 0x32, 0xd1, 0xb3, 0xf5, 0x27, 0x61, 0xec, 0xd4, 0xd1,
	0x4b, 0x27, 0xf9, 0x96, 0xcd, 0x31, 0x58, 0xa9, 0x1d, 0x12, 0x20, 0x19, 0x87, 0x3e, 0x4b, 0x56,
	0xc9, 0x6e, 0x72, 0x9e, 0x61, 0xb0, 0xc5, 0x70, 0xe5, 0x82, 0xa5, 0x3a, 0xd4, 0x35, 0x20, 0xc9,
	0x97, 0x32, 0x24, 0x75, 0xab, 0x4b, 0xf0, 0xd9, 0x28, 0xe2, 0x45, 0x3f, 0x5d, 0x95, 0xa1, 0x22,
	0x0e, 0x7c, 0xcf, 0x96, 0xa5, 0x79, 0x00, 0x19, 0x0b, 0x7f, 0xc1, 0x38, 0x06, 0xfc, 0xb7, 0x0d,
	0xc5, 0x6d, 0x1a, 0xbf, 0x3e, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x39, 0x02, 0xf4, 0x3f, 0xde,
	0x00, 0x00, 0x00,
}
